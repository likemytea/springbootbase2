==单数据源和多数据源配置源码在 demomultiDatasource 工程里==
==单数据源使用及配置==
一、pom文件追加依赖包
  主要追加spring-jdbc的jar包，连接池和mysql的就省略不说了
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>   
二、properties追加数据源
   留意这个要写下，其余的配置看源码。
   spring.cloud.config.server.jdbc=true
三、写javaconfig类
     看源码
四/完毕
==多数据源使用及配置==
一、在properties配置文件新增配置
二、在DBConfig.java 文件修改并新增配置
三、使用jdbctemplate的地方，在声明实例的地方，使用 Qualifier配置注解。如下：

  	@Qualifier("myJdbcTemplatep1")
	private MyJdbcTemplate myjdbcTemplate;
四、在其中一个数据源上指定@Primary注解，不指定会报异常。
五、完毕！	
======sharding jdbc源码在 demoshardingjdbc=======================
1、pom文件在多数据源demo上追加依赖包
        <!-- sharding jdbc start  -->
		<dependency>
		    <groupId>io.shardingsphere</groupId>
		    <artifactId>sharding-jdbc</artifactId>
		    <version>3.0.0.M1</version>
		</dependency>
        <!-- sharding jdbc end  -->
        
2、新建 DBShardingConfig.java 文件
3、对于分片的表和不分片的表做联合查询，因为sql是在一个库里边被执行，所以没分片的表也要被放在分片的表所在的库里边
        这个逻辑是否合理，还没有对 shardingjdbc深入研究，所以我想的是当真正用shardingjdbc的时候，我们争取只做
        1 绑定表之间的联合查询
        2 分片表和不分片的表的联合查询（这种情况，要把不分片的表copy到所有分片表所在的库里，否则报表不存在异常）
   

