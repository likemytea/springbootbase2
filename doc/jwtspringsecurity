基于文章：https://segmentfault.com/a/1190000009231329
一.简介： jwt - json  web token 简单的说：就是服务端根据一个密码和算法生成token，然后发给客户端，
      客户端只负责每次请求都在header里边带上token，然后服务端负责验证这个token是不是合法的，有
  没有过期等，并可以解析出subject和claim里边的数据。
二.使用流程：
   1。配置策略类来配置哪些url请求需要拦截，哪些不需要拦截，配置登陆使用哪个拦截器拦截
   2。登陆操作时，被我们自定义的jwtloginfilter拦截器拦截（里边三个方法，attempt拦截，拦截成功，拦截失败），
               拦截后在我们自定义的拦截功能类里边认证。认证成功后进入前面的第二步：拦截成功或第三部拦截失败，在这
               两步里边就直接response给请求方了，流程结束。
   3。其它任何访问请求，先被自定义的授权服务器（JWTAuthenticationFilter）拦截，验证jwt的合法性，不合法则调用jwt默认的组件返回异常信息，
               验证成功则执行真正的请求。
   4。权限和角色配置是在安全配置类（WebSecurityConfig）初始化的时候配置的，如下：
   				// 权限检查
				.antMatchers("/hello").hasAuthority("AUTH_WRITE")
				// 角色检查
				.antMatchers("/world").hasRole("ADMIN")
	  然后，登陆的时候，根据username来从DB获取角色和权限，并将其放到jwt中返回给调用方，
	  调用方再次发送请求时，后端服务根据其jwt中的角色权限和安全配置类里边配置的角色权限对比。
               
三.前端使用流程
          前端页面登录成功后拿到token值，首先要将其存在本地，localStorage或者sessionStorage皆可。
          然后添加前端的拦截器，在每次请求之前将此token值放入request对象的header中即可。
总结：
* JWT只通过算法实现对Token合法性的验证，不依赖数据库，Memcached的等存储系统，
因此可以做到跨服务器验证，只要密钥和算法相同，不同服务器程序生成的Token可以互相验证。
* JWT Token需要持久化在Memcached中吗？
不应该这样做，这样就背离了JWT通过算法验证的初心。
* 在退出登录时怎样实现JWT Token失效呢？
退出登录， 只要客户端端把Token丢弃就可以了，服务器端不需要废弃Token。另外jwt本身可以配置自身的过期时间
* 怎样保持客户端长时间保持登录状态？
服务器端提供刷新Token的接口， 客户端负责按一定的逻辑刷新服务器Token。
* 服务器端是否应该从JWT中取出userid用于业务查询？
REST API是无状态的，意味着服务器端每次请求都是独立的，即不依赖以前请求的结果，因此也不应该依赖JWT token做业务查询，
 应该在请求报文中单独加个userid 字段。为了做用户水平越权的检查，可以在业务层判断传入的userid和
 从JWT token中解析出的userid是否一致， 有些业务可能会允许查不同用户的数据。

验证demo：
使用账号密码登陆：
curl -H "Content-Type: application/json" -X POST -d '{"username":"zhangsan","password":"111111"}' http://172.16.176.51:8080/login
使用jwt访问资源：
curl -H "Content-Type: application/json" -H "Authorization: Bearer jwtxxxxxx" http://172.16.176.51:8080/users